def FallInGravity(thetalist, g, Mlist, Glist, Slist, tf, steps, filename):
    """Simulates the UR5 serial chain robot falling in gravity with zero velocities and torques
    Required parameters. The return value is a .csv table of the joint angles recorded at each step
    of the simulation
    -------------------
    :param thetalist: n-vector of initial joint variables
    :param g: Gravity vector g
    :param Mlist: List of link frames {i} relative to {i-1} at the home
                  position
    :param Glist: Spatial inertia matrices Gi of the links
    :param Slist: Screw axes Si of the joints in a space frame, in the format
                  of a matrix with axes as the columns
    :param tf: The total time of the simulation in seconds
    :param steps: The number of times the joint angles are recorded per second
    :return csv: The .csv file containing the tf*steps joint angles

    This function calls a numerical integration procedure that uses
    ForwardDynamics (The "Forward Dynamics" and "Euler Step" functions from the Modern Robotics Library)
    """
    # dt is the timestep between consecutive joint angle measurements in seconds
    dt = 1 / steps
    # taumat is the matrix of joint forces/torques. Here it is just zeros since no torques are applied
    taumat = np.zeros((int(tf/dt), 6)).T
    # The matrix of forces at the end-effector is also zero since no force is applied at the end-effector
    Ftipmat = np.zeros((int(tf/dt), 6)).T
    # initializing the matrix of theta angles to be included in the returned .csv file
    thetamat = taumat.copy().astype(np.float)
    thetamat[:, 0] = thetalist
    # initializing the velocity matrix
    dthetamat = taumat.copy().astype(np.float)
    # In the context of this function, no velocities are applied
    dthetalist = np.zeros(6)
    dthetamat[:, 0] = dthetalist
    # iteratively applying the Forward Dynamics and Euler Step Integration of the model
    for i in range(np.array(taumat).shape[1] - 1):
        ddthetalist = ForwardDynamics(thetalist, dthetalist, taumat[:, i], g, Ftipmat[:, i], Mlist, Glist, Slist)
        thetalist,dthetalist = EulerStep(thetalist, dthetalist, ddthetalist, dt)
        thetamat[:, i + 1] = thetalist
        dthetamat[:, i + 1] = dthetalist
    thetamat = np.array(thetamat).T
    dthetamat = np.array(dthetamat).T
    # saving the thetamat entries to a .csv file
    csv = np.savetxt(filename, thetamat, delimiter=",")
    return csv

#PARAMETERS

# The first simulation is to last 3 seconds
tf_sim1 = 3
# The second simulation is to last 5 seconds
tf_sim2 = 5
# For smooth animation, 1000 joint angle measurements / second are recorded
steps = 1000
# All joint angles are zero in the first simulation
thetalist_sim1 = np.zeros(6)
# All joints but joint 2 are zero in the second simulation
thetalist_sim2 = np.array([0,-1,0,0,0,0])
# The gravity vector with gravity in the -z direction
g = np.array([0, 0, -9.81])

# The UR5-specific parameters
M01 = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0.089159], [0, 0, 0, 1]])
M12 = np.array([[0, 0, 1, 0.28], [0, 1, 0, 0.13585], [-1, 0, 0, 0], [0, 0, 0, 1]])
M23 = np.array([[1, 0, 0, 0], [0, 1, 0, -0.1197], [0, 0, 1, 0.395], [0, 0, 0, 1]])
M34 = np.array([[0, 0, 1, 0], [0, 1, 0, 0], [-1, 0, 0, 0.14225], [0, 0, 0, 1]])
M45 = np.array([[1, 0, 0, 0], [0, 1, 0, 0.093], [0, 0, 1, 0], [0, 0, 0, 1]])
M56 = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0.09465], [0, 0, 0, 1]])
M67 = np.array([[1, 0, 0, 0], [0, 0, 1, 0.0823], [0, -1, 0, 0], [0, 0, 0, 1]])
G1 = np.diag([0.010267495893, 0.010267495893,  0.00666, 3.7, 3.7, 3.7])
G2 = np.diag([0.22689067591, 0.22689067591, 0.0151074, 8.393, 8.393, 8.393])
G3 = np.diag([0.049443313556, 0.049443313556, 0.004095, 2.275, 2.275, 2.275])
G4 = np.diag([0.111172755531, 0.111172755531, 0.21942, 1.219, 1.219, 1.219])
G5 = np.diag([0.111172755531, 0.111172755531, 0.21942, 1.219, 1.219, 1.219])
G6 = np.diag([0.0171364731454, 0.0171364731454, 0.033822, 0.1879, 0.1879, 0.1879])
Glist = [G1, G2, G3, G4, G5, G6]
Mlist = [M01, M12, M23, M34, M45, M56, M67] 
Slist = np.array([[0,         0,         0,         0,        0,        0],
         [0,         1,         1,         1,        0,        1],
         [1,         0,         0,         0,       -1,        0],
         [0, -0.089159, -0.089159, -0.089159, -0.10915, 0.005491],
         [0,         0,         0,         0,  0.81725,        0],
         [0,         0,     0.425,   0.81725,        0,  0.81725]])

# calling FallInGravity with the parameters for the first simulation, naming the .csv file "simulation1"
FallInGravity(thetalist_sim1, g, Mlist, Glist, Slist, tf_sim1, steps, "simulation1.csv")